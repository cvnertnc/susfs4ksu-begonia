From d085701fa32de30917d800c03fc7e67722df1017 Mon Sep 17 00:00:00 2001
From: cvnertnc <the.civanertunc@gmail.com>
Date: Sat, 1 Feb 2025 15:16:18 +0000
Subject: [PATCH] Kernel: Power implement namespace.c

---
 fs/namespace.c | 59 ++++++++++++++++++++++++++++++--------------------
 1 file changed, 36 insertions(+), 23 deletions(-)

diff --git a/fs/namespace.c b/fs/namespace.c
index 5fcd130966cd..540ed0ab08e1 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -1730,39 +1730,52 @@ static inline bool may_mandlock(void)
 }
 #endif
 
+/**
+ * path_mounted - check whether path is mounted
+ * @path: path to check
+ *
+ * Determine whether @path refers to the root of a mount.
+ *
+ * Return: true if @path is the root of a mount, false if not.
+ */
+static inline bool path_mounted(const struct path *path)
+{
+	return path->mnt->mnt_root == path->dentry;
+}
+
 static int can_umount(const struct path *path, int flags)
 {
-    struct mount *mnt = real_mount(path->mnt);
+	struct mount *mnt = real_mount(path->mnt);
 
-    if (flags & ~(MNT_FORCE | MNT_DETACH | MNT_EXPIRE | UMOUNT_NOFOLLOW))
-        return -EINVAL;
-    if (!may_mount())
-        return -EPERM;
-    if (path->dentry != path->mnt->mnt_root)
-        return -EINVAL;
-    if (!check_mnt(mnt))
-        return -EINVAL;
-    if (mnt->mnt.mnt_flags & MNT_LOCKED) /* Check optimistically */
-        return -EINVAL;
-    if (flags & MNT_FORCE && !capable(CAP_SYS_ADMIN))
-        return -EPERM;
-    return 0;
+	if (!may_mount())
+		return -EPERM;
+	if (!path_mounted(path))
+		return -EINVAL;
+	if (!check_mnt(mnt))
+		return -EINVAL;
+	if (mnt->mnt.mnt_flags & MNT_LOCKED) /* Check optimistically */
+		return -EINVAL;
+	if (flags & MNT_FORCE && !capable(CAP_SYS_ADMIN))
+		return -EPERM;
+	return 0;
 }
 
+// caller is responsible for flags being sane
 int path_umount(struct path *path, int flags)
 {
-    struct mount *mnt = real_mount(path->mnt);
-    int ret;
+	struct mount *mnt = real_mount(path->mnt);
+	int ret;
 
-    ret = can_umount(path, flags);
-    if (!ret)
-        ret = do_umount(mnt, flags);
+	ret = can_umount(path, flags);
+	if (!ret)
+		ret = do_umount(mnt, flags);
 
-    /* we mustn't call path_put() as that would clear mnt_expiry_mark */
-    dput(path->dentry);
-    mntput_no_expire(mnt);
-    return ret;
+	/* we mustn't call path_put() as that would clear mnt_expiry_mark */
+	dput(path->dentry);
+	mntput_no_expire(mnt);
+	return ret;
 }
+
 /*
  * Now umount can handle mount points as well as block devices.
  * This is important for filesystems which use unnamed block devices.
