From bbeeb365deee1360a60f9528987f9c3af3c1589b Mon Sep 17 00:00:00 2001
From: backslashxx <118538522+backslashxx@users.noreply.github.com>
Date: Sun, 18 May 2025 10:06:50 +0800
Subject: [PATCH] kernel: ksud: provide ksu_handle_compat_execve_ksud

Since `kernel/selinux: fix pointer mismatch with 32-bit ksud on 64-bit kernels`
fixed 32-on-64 setups, it is now possible to run KernelSU properly on those.

But an issue arises around its exec hook! sys_execve passes native pointers.
Good -- thats what we want. But then on 32-on-64 setups, its not a good idea.
ksud will still be ran on sys_execve!

Here we provide a helper function for it, ksu_handle_compat_execve_ksud.
usage is the same as ksu_handle_execve_ksud, the only difference is that
for argv, it uses argv.ptr.compat instead of argv.ptr.native.

Yes this is possible to commonize and we do that on next commit.

Signed-off-by: backslashxx <118538522+backslashxx@users.noreply.github.com>
---
 kernel/ksud.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/kernel/ksud.c b/kernel/ksud.c
index 6d55dde08087..150cdee2b40b 100644
--- a/kernel/ksud.c
+++ b/kernel/ksud.c
@@ -498,6 +498,33 @@ __maybe_unused int ksu_handle_execve_ksud(const char __user *filename_user,
 	return ksu_handle_execveat_ksud(AT_FDCWD, &filename_p, &argv, NULL, NULL);
 }
 
+#if defined(CONFIG_64BIT) && defined(CONFIG_COMPAT)
+__maybe_unused int ksu_handle_compat_execve_ksud(const char __user *filename_user,
+			const compat_uptr_t __user *__argv)
+{
+	struct user_arg_ptr argv = { .ptr.compat = __argv };
+	struct filename filename_in, *filename_p;
+	char path[32];
+
+	// return early if disabled.
+	if (!ksu_execveat_hook) {
+		return 0;
+	}
+
+	if (!filename_user)
+		return 0;
+
+	memset(path, 0, sizeof(path));
+	ksu_strncpy_from_user_nofault(path, filename_user, 32);
+
+	// this is because ksu_handle_execveat_ksud calls it filename->name
+	filename_in.name = path;
+	filename_p = &filename_in;
+    
+	return ksu_handle_execveat_ksud(AT_FDCWD, &filename_p, &argv, NULL, NULL);
+}
+#endif
+
 static void stop_vfs_read_hook()
 {
 	ksu_vfs_read_hook = false;
